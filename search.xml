<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++之const关键字</title>
      <link href="/undefined/7ba1798e.html"/>
      <url>/undefined/7ba1798e.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-学习-之-const的使用"><a href="#C-学习-之-const的使用" class="headerlink" title="C++学习 之 const的使用"></a>C++学习 之 const的使用</h1><p>1.const用于声明一个常量，这个量在代码中应该不能被更改。就像下面这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">float</span> c = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//You can not do this:</span></span><br><span class="line">c = <span class="number">10</span>;<span class="comment">//error!</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;像上述这样的常量声明看上去这个常量非常的稳定且“坚固”，但实际上，我们可以做一件非常有趣的事情像下面这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">a = (<span class="type">int</span>*)&amp;c;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">std::cout&lt;&lt; b &lt;&lt;std::endl;</span><br><span class="line"><span class="comment">//results is 1</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;非常有趣的事情发生了，指针a居然修改了常量c的值！我们通过引用c的值再获取c的地址的方式成功修改了c的值，引用类型强制转换成指针类型，这让我们成功的通过赋值让指向了c，这表明了在C++中的常量并不是完全无法更改的，他只是一种代码规则而不是程序规则。<br>2.const在C++的类中也有一些有趣的用法。<br>&emsp;&emsp;同样的，在类中我们一样可以声明成员常量。但是不同于C的是，C++的成员函数可以赋予const的属性，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_X;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Get_X</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_X;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Set_X</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_X = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样的函数类型让我们的函数禁用了修改成员变量的功能，成员变量对于这样的函数是只读的，同时对于常量的对象引用，只有这样的函数是可调用的(因为常量对象是不允许修改成员变量的，相应的就不允许调用普通的成员函数)，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Value</span><span class="params">(<span class="type">const</span> entity e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Get_X</span>();<span class="comment">//这样的函数是允许访问的</span></span><br><span class="line"><span class="built_in">Set_X</span>();<span class="comment">//这样的则不可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当然，如果想通过const函数去操作变量，可以适应mutable操作符(或许是为了测试又或者别的原因，谁知道呢？)</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之成员初始化列表</title>
      <link href="/undefined/d87f7e0c.html"/>
      <url>/undefined/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-学习-之-成员初始化列表"><a href="#C-学习-之-成员初始化列表" class="headerlink" title="C++学习 之 成员初始化列表"></a>C++学习 之 成员初始化列表</h1><p>&emsp;&emsp;在类中，我们经常使用构造函数去初始化我们的成员变量以及进行一系列初始化操作，比如这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> m_X,m_Y;</span><br><span class="line">        std::string m_Name;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Entity</span>()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Entity</span>(std::string&amp; name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> m_X = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> m_Y = <span class="number">1</span>;</span><br><span class="line">            m_Name = name;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Entity <span class="title">e</span><span class="params">(<span class="string">&quot;LSJ&quot;</span>)</span></span>;</span><br><span class="line">    std::cout&lt;&lt; e.m_Name &lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们也可以使用另一种初始化方法，那就是成员初始化列表，方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> m_X,m_Y;</span><br><span class="line">        std::string m_Name;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Entity</span>()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Entity</span>(std::string&amp; name)</span><br><span class="line">            :<span class="built_in">m_X</span>(<span class="number">1</span>),<span class="built_in">m_Y</span>(<span class="number">1</span>),<span class="built_in">m_Name</span>(name)<span class="comment">//just like this</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;显然，我们在这样做的时候必须遵守成员变量声明的顺序进行初始化，以防止出现任何意外的错误。那么，这样的方法除了能让初始化变量与初始化处理等一系列操作从代码里分离方便阅读，还有什么其他的优点？<br>&emsp;&emsp;事实上，在C++类的其他类类型的成员声明的时候，会为类类型的成员主动地进行初始化，在构造函数中又会再次为这个已经初始化的类类型赋值，这样会造成性能上的损耗。比如用下面的方法去做：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_X;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">NewClass</span>()</span><br><span class="line">&#123;</span><br><span class="line">FDF::<span class="built_in">print</span>(<span class="string">&quot;number is created&quot;</span>);</span><br><span class="line">        <span class="comment">//这里使用的FDF命名空间是我自己定义的头文件中的</span></span><br><span class="line">        <span class="comment">//实际使用起来的效果和cout输出流没有太大区别，本身也是把cout封装实现的效果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">NewClass</span>(<span class="type">const</span> <span class="type">int</span>&amp; number)</span><br><span class="line">&#123;</span><br><span class="line">m_X = number;</span><br><span class="line">FDF::<span class="built_in">print</span>(<span class="string">&quot;number is created with&quot;</span>,number);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        NewCLass m_Member;</span><br><span class="line">        <span class="type">int</span> m_X;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Entity</span>()&#123;&#125;</span><br><span class="line">        <span class="built_in">Entity</span>(<span class="type">const</span> <span class="type">int</span> number)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Member = <span class="built_in">NewClass</span>(<span class="number">8</span>);</span><br><span class="line">            m_X = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Entity <span class="title">e</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上述代码就会同时出现内容”number is created”和内容”number is created with 8”，这意味着m_Member被初始化了两次，而通过初始化成员列表的方法就不会出现这样的重复初始化的情况。<br>&emsp;&emsp;所以我们在写构造函数的时候最好应该使用初始化成员列表，虽然有时候重复初始化的情况不一定发生(当成员变量都是基础类型的时候就不会重复初始化)，但是最好还是防患于未然，使用如下的构造函数写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        NewCLass m_Member;</span><br><span class="line">        <span class="type">int</span> m_X;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Entity</span>()&#123;&#125;</span><br><span class="line">        <span class="built_in">Entity</span>(<span class="type">const</span> <span class="type">int</span> number)</span><br><span class="line">            :<span class="built_in">m_Member</span>(<span class="number">8</span>),<span class="built_in">m_X</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
